{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","Negociacao","NegociacaoDao","ConnectionFactory","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Date","objeto","data","quantidade","valor","console","log","negociacao","getConnection","connection","dao","add","listaTodos","apagarBanco","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {Negociacao} from '../models/Negociacao';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {ConnectionFactory} from './ConnectionFactory';\n\n\nexport class NegociacaoService {\n\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes(){\n        return Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()])\n                .then(periodos => {\n                    let negociacoes = periodos.reduce((dados, periodo)=> dados.concat(periodo), []);\n                    return negociacoes;\n                })\n                .catch(erro => {\n                    throw new Error(erro)\n                });\n            \n    }\n    \n    obterNegociacoesDaSemana(){\n\n            return this._http.get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map( objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(`Dados da semana nao importados.`)\n                \n            })\n\n    }\n\n    obterNegociacoesDaSemanaAnterior(){\n\n            return this._http.get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map( objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(`Dados da semana anterior nao importados.`)                \n            })\n    }\n\n    obterNegociacoesDaSemanaRetrasada(){\n\n            return this._http.get('negociacoes/retrasada')\n            .then( negociacoes => {\n                return negociacoes.map( objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(`Dados da semana retrasada nao importados.`);                \n            });\n    }\n\n    cadastra(negociacao){\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.add(negociacao))\n            .then(() => 'Negociacao adicionada com sucesso!')\n            .catch((erro)=> {\n                console.log(erro);                \n                throw new Error('Nao foi possivel adicionar uma negociacao!')\n            });          \n        }\n        \n    lista(){\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);                \n                throw new Error('Nao foi possivel obter as negociacoes.');\n            })\n    }\n\n    apaga(){\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagarBanco())\n            .then(() => 'Dados do banco apagados com sucesso!')\n            .catch(erro => {\n                console.log(erro);                \n                throw new Error('Nao foi possivel apagar os dados do banco.')\n            })\n          \n    }\n\n    importa(listaAtual){\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)\n                    )\n                )\n            )\n            .catch(erro => {\n                console.log(erro);            \n                throw new Error('Nao foi possivel importar a lista de negociacoes.')\n            });\n    }\n}"]}