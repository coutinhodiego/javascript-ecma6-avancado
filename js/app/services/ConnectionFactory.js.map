{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAGCC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBAzBM,CAAP;AA0BH;;;kDAEoBtB,U,EAAW;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACL1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAgB,IAAjB,EAApC;AACC,yBALD;AAMH;;;sDAEuB;AACpB5B;AACAD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 2;\nconst dbName = 'aluraFrame';\n\nlet connection = null;\nlet close = null;\n\n\nexport class ConnectionFactory {\n\n    constructor(){\n        throw new Error('Esta classe nao pode ser instanciada.')\n    }\n\n    static getConnection(){\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n            }\n            \n            openRequest.onsuccess = e => {\n\n                if(!connection){\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){\n                        throw new Error('Voce nao pode fechar a conexao!')\n                    }\n                }\n                resolve(connection);                \n            }\n            \n            openRequest.onerror = e => {\n\n                console.log(e.target.error);\n                reject(e.target.error.name);                \n            }\n        });\n    }\n    \n    static _createStores(connection){\n        \n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store)){\n                connection.deleteObjectStore(store);\n            }\n        connection.createObjectStore(store, {autoIncrement : true})\n        })\n    }\n\n    static closeConnection(){\n        close();\n        connection = null;\n    }\n}\n\n"]}